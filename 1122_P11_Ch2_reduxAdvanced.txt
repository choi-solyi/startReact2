리덕스 advanced
비동기 액션처리

1. 기존
$ npm i axios

기본적인 방법으로의 비동기 방식
프레젠테이셔널 컴포넌트에서 진행해서 복잡해짐을 알수있었다.
액션을 각각 start, success, fail 로 디스패치 해주어야함.
리듀서는 동기적 (pure)이기 떄문.
그렇기 떄문에 dispatch도 동기적이다.

추가적인 라이브러리 없이 비동기 작업을 컴포넌트에서 컨테이너로 옮겨보도록한다.

비동기 로직을 컴포넌트안에서 작업하면 테스트 하기도 어렵고
뷰에 관련된 로직이 아닌게 추가돼서 디버깅이 복잡해질수있음
컴포넌트는 프롭스를 받아서 보여주는 용도로만 사용하고
유저리스트컨테이너에서 비동기 작업처리를 한번에 하는걸로 만들어서
함수를 넣어주면 훨씬 깔끔하고 역할에 맞는 코드를 작성 할 수 있음


2. 미들웨어

디스패치 앞뒤에 코드를 추가할수있게 도와줌
여러개면 순차적으로 실행ㅇ됨
2단계가 있는데 
(1) 스토어를 만들때 미들웨어를 설정하는 부분
(2) 디스패치가 호출될떄 실제로 미들웨어를 통과하는부분


3. redux devTools
npm i redux-devtools-extension -D

4. redux-thunk 가장 많이 쓰인다
https://github.com/reduxjs/redux-thunk
리덕스 미들웨어
리덕스의 제작자가 만듬
비동기처리를 위한 라이브러리
액션생성자를 활용하여 비동기처리
액션생성자가 액션을 리턴하지않고 함수를 리턴함

$ npm i redux-thunk

dispatch : 액션을 스토어에 전달하는 역할

5. redux-promise-middleware
$ npm i redux-promise-middleware
